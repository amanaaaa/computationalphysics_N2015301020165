from mpl_toolkits.mplot3d import Axes3D  
from matplotlib import cm  
from matplotlib.ticker import LinearLocator, FormatStrFormatter  
import matplotlib.pyplot as plt  
from numpy import *;#导入numpy的库函数
import numpy as np; #这个方式使用numpy的函数时，需要以np.开头。
import math
# 平移坐标
v=np.zeros( (21,21) )
v_1=np.zeros( (21,21) )
v_2=np.zeros( (21,21) )
v_3=np.zeros( (21,21) )
v_4=np.zeros( (21,21) )
v_old=np.zeros( (21,21) )
deltav=np.zeros( (21,21) )
d=[]
for i in range (10,16):
    v[i][13]=1
n=0
while n<30:
    n+=1
    for i in range(21):
        for j in range(21):
            v_old[i][j]=v[i][j]
            if j==13 :
                v[i][j]=v[i][j]
            elif 9<i<20 and 9<j<20:
                # 叠加各个象限的电容器产生的电势
                v_1[i][j]=(v[i-1][j]+v[i+1][j]+v[i][j-1]+v[i][j+1])/4.
                v_2[i][j]=-(v[i-1][20-j]+v[i+1][20-j]+v[i][20-(j-1)]+v[i][20-(j+1)])/4.
                v_3[i][j]=(v[20-(i-1)][20-j]+v[20-(i+1)][20-j]+v[20-i][20-(j-1)]+v[20-i][20-(j+1)])/4.
                v_4[i][j]=-(v[20-(i-1)][j]+v[20-(i+1)][j]+v[20-i][j-1]+v[20-i][j+1])/4.

                # 叠加
                v[i][j]=v_1[i][j]+v_2[i][j]+v_3[i][j]+v_4[i][j]
            else:
                v[i][j]=0
            deltav[i][j]=abs(v[i][j]-v_old[i][j])
            if deltav[i][j]!=0:
                d.append(deltav[i][j])
            

print('deltav(i,j)=',max(d))
